#!/usr/bin/env python

Import('env')

env_assimp = env.Clone()
#env_assimp.disable_warnings()
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/godot/thirdparty/assimp/contrib/unzip/*.c'))

env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/Half/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/Half/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/Iex/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IexMath/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/Imath/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThread.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadMutex.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadPool.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadSemaphore.cpp'))

if(env['platform'] == 'windows'):
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadMutexWin32.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadSemaphoreWin32.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadWin32.cpp'))
else:
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadMutexPosix.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadPosix.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadSemaphorePosixCompat.cpp'))
    env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/IlmThread/IlmThreadSemaphorePosix.cpp'))

env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/openexr/IlmBase/config/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/Abc/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCollection/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCoreAbstract/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCoreFactory/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCoreLayer/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcCoreOgawa/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcGeom/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/AbcMaterial/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/Ogawa/*.cpp'))
env_assimp.add_source_files(env.modules_sources, Glob('#thirdparty/alembic/lib/Alembic/Util/*.cpp'))
env_assimp.Append(CPPPATH=['#thirdparty/alembic/lib'])
env_assimp.Append(CPPPATH=['#thirdparty/alembic/lib/Alembic/Util'])
env_assimp.Append(CPPPATH=['#thirdparty/zlib/'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/Iex'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/Half'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/IexMath'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/Imath'])
env_assimp.Append(CPPPATH=['#thirdparty/openexr/IlmBase/lex'])
env_assimp.Append(CPPPATH=['ilmbase'])
env_assimp.Append(CPPPATH=['.'])

if (env.msvc == False and env['platform'] == 'windows' ):
     env_assimp.Append(LDFLAGS="-pthread")

if(env['platform'] == 'windows'):
    env_assimp.Append(CPPFLAGS=['-DPLATFORM_WINDOWS'])
    env_assimp.Append(CPPFLAGS=['-DPLATFORM=WINDOWS'])
elif(env['platform'] == 'x11'):
    env_assimp.Append(CPPFLAGS=['-DPLATFORM_LINUX'])
    env_assimp.Append(CPPFLAGS=['-DPLATFORM=LINUX'])
elif(env['platform'] == 'osx'):
    env_assimp.Append(CPPFLAGS=['-DPLATFORM_DARWIN'])
    env_assimp.Append(CPPFLAGS=['-DPLATFORM=DARWIN'])

# Godot's own source files
env_assimp.add_source_files(env.modules_sources, "*.cpp")
