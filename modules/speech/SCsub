Import("env")

module_env = env.Clone()

if not env.msvc:
    module_env.Append(CCFLAGS=["-Wno-error=non-virtual-dtor"])
    module_env.Append(CCFLAGS=["-Wno-error=ctor-dtor-privacy"])

module_env.Append(
    CPPDEFINES=[
        "HAVE_CONFIG_H",
        "PACKAGE=",
        "VERSION=",
        "CPU_CLIPS_POSITIVE=0",
        "CPU_CLIPS_NEGATIVE=0",
        "WEBRTC_APM_DEBUG_DUMP=0",
    ]
)

enable_webrtc_logging = env["target"] == "debug"

if not enable_webrtc_logging:
    module_env.Append(CPPDEFINES=["RTC_DISABLE_LOGGING", "RTC_DISABLE_METRICS"])

if env["platform"] == "windows" or env["platform"] == "uwp":
    module_env.Append(CPPDEFINES=["WEBRTC_WIN"])
elif env["platform"] == "ios":
    module_env.Append(CPPDEFINES=["WEBRTC_POSIX", "WEBRTC_IOS"])
elif env["platform"] == "macos":
    module_env.Append(CPPDEFINES=["WEBRTC_POSIX", "WEBRTC_MAC"])
elif env["platform"] == "linuxbsd":
    module_env.Append(CPPDEFINES=["WEBRTC_POSIX", "WEBRTC_LINUX"])
elif env["platform"] == "android":
    module_env.Append(CPPDEFINES=["WEBRTC_POSIX", "WEBRTC_ANDROID"])
else:  # including if env["platform"] == "javascript":
    module_env.Append(CPPDEFINES=["WEBRTC_POSIX"])

module_env.Prepend(CPPPATH=["thirdparty/libsamplerate/src"])
module_env.Prepend(CPPPATH=["thirdparty/opus"])
module_env.Prepend(CPPPATH=["thirdparty/opus/opus"])
module_env.Prepend(CPPPATH=["include"])
module_env.Prepend(CPPPATH=["include"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3/base"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3/base/abseil"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3/audio_processing"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3/audio_processing/aec3"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3/audio_processing/include"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3/audio_processing/logging"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3/audio_processing/resampler"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3/audio_processing/utility"])
module_env.Prepend(CPPPATH=["thirdparty/AEC3/base/jsoncpp/include"])

env_thirdparty = module_env.Clone()
env_thirdparty.disable_warnings()
thirdparty_dir = "thirdparty/opus/"
thirdparty_sources = [
    # Sync with opus_sources.mk
    "opus.c",
    "opus_decoder.c",
    "opus_encoder.c",
    "opus_multistream.c",
    "opus_multistream_encoder.c",
    "opus_multistream_decoder.c",
    "repacketizer.c",
    "analysis.c",
    "mlp.c",
    "mlp_data.c",
    # Sync with libopusfile Makefile.am
    "info.c",
    "internal.c",
    "opusfile.c",
    "stream.c",
    # Sync with celt_sources.mk
    "celt/bands.c",
    "celt/celt.c",
    "celt/celt_encoder.c",
    "celt/celt_decoder.c",
    "celt/cwrs.c",
    "celt/entcode.c",
    "celt/entdec.c",
    "celt/entenc.c",
    "celt/kiss_fft.c",
    "celt/laplace.c",
    "celt/mathops.c",
    "celt/mdct.c",
    "celt/modes.c",
    "celt/pitch.c",
    "celt/celt_lpc.c",
    "celt/quant_bands.c",
    "celt/rate.c",
    "celt/vq.c",
    # "celt/arm/arm_celt_map.c",
    # "celt/arm/armcpu.c",
    # "celt/arm/celt_ne10_fft.c",
    # "celt/arm/celt_ne10_mdct.c",
    # "celt/arm/celt_neon_intr.c",
    # Sync with silk_sources.mk
    "silk/CNG.c",
    "silk/code_signs.c",
    "silk/init_decoder.c",
    "silk/decode_core.c",
    "silk/decode_frame.c",
    "silk/decode_parameters.c",
    "silk/decode_indices.c",
    "silk/decode_pulses.c",
    "silk/decoder_set_fs.c",
    "silk/dec_API.c",
    "silk/enc_API.c",
    "silk/encode_indices.c",
    "silk/encode_pulses.c",
    "silk/gain_quant.c",
    "silk/interpolate.c",
    "silk/LP_variable_cutoff.c",
    "silk/NLSF_decode.c",
    "silk/NSQ.c",
    "silk/NSQ_del_dec.c",
    "silk/PLC.c",
    "silk/shell_coder.c",
    "silk/tables_gain.c",
    "silk/tables_LTP.c",
    "silk/tables_NLSF_CB_NB_MB.c",
    "silk/tables_NLSF_CB_WB.c",
    "silk/tables_other.c",
    "silk/tables_pitch_lag.c",
    "silk/tables_pulses_per_block.c",
    "silk/VAD.c",
    "silk/control_audio_bandwidth.c",
    "silk/quant_LTP_gains.c",
    "silk/VQ_WMat_EC.c",
    "silk/HP_variable_cutoff.c",
    "silk/NLSF_encode.c",
    "silk/NLSF_VQ.c",
    "silk/NLSF_unpack.c",
    "silk/NLSF_del_dec_quant.c",
    "silk/process_NLSFs.c",
    "silk/stereo_LR_to_MS.c",
    "silk/stereo_MS_to_LR.c",
    "silk/check_control_input.c",
    "silk/control_SNR.c",
    "silk/init_encoder.c",
    "silk/control_codec.c",
    "silk/A2NLSF.c",
    "silk/ana_filt_bank_1.c",
    "silk/biquad_alt.c",
    "silk/bwexpander_32.c",
    "silk/bwexpander.c",
    "silk/debug.c",
    "silk/decode_pitch.c",
    "silk/inner_prod_aligned.c",
    "silk/lin2log.c",
    "silk/log2lin.c",
    "silk/LPC_analysis_filter.c",
    "silk/LPC_inv_pred_gain.c",
    "silk/table_LSF_cos.c",
    "silk/NLSF2A.c",
    "silk/NLSF_stabilize.c",
    "silk/NLSF_VQ_weights_laroia.c",
    "silk/pitch_est_tables.c",
    "silk/resampler.c",
    "silk/resampler_down2_3.c",
    "silk/resampler_down2.c",
    "silk/resampler_private_AR2.c",
    "silk/resampler_private_down_FIR.c",
    "silk/resampler_private_IIR_FIR.c",
    "silk/resampler_private_up2_HQ.c",
    "silk/resampler_rom.c",
    "silk/sigm_Q15.c",
    "silk/sort.c",
    "silk/sum_sqr_shift.c",
    "silk/stereo_decode_pred.c",
    "silk/stereo_encode_pred.c",
    "silk/stereo_find_predictor.c",
    "silk/stereo_quant_pred.c",
]

opus_sources_silk = []

if env["platform"] in ["android", "iphone", "javascript"]:
    env_thirdparty.Append(CPPDEFINES=["FIXED_POINT"])
    opus_sources_silk = [
        "silk/fixed/LTP_analysis_filter_FIX.c",
        "silk/fixed/LTP_scale_ctrl_FIX.c",
        "silk/fixed/corrMatrix_FIX.c",
        "silk/fixed/encode_frame_FIX.c",
        "silk/fixed/find_LPC_FIX.c",
        "silk/fixed/find_LTP_FIX.c",
        "silk/fixed/find_pitch_lags_FIX.c",
        "silk/fixed/find_pred_coefs_FIX.c",
        "silk/fixed/noise_shape_analysis_FIX.c",
        "silk/fixed/prefilter_FIX.c",
        "silk/fixed/process_gains_FIX.c",
        "silk/fixed/regularize_correlations_FIX.c",
        "silk/fixed/residual_energy16_FIX.c",
        "silk/fixed/residual_energy_FIX.c",
        "silk/fixed/solve_LS_FIX.c",
        "silk/fixed/warped_autocorrelation_FIX.c",
        "silk/fixed/apply_sine_window_FIX.c",
        "silk/fixed/autocorr_FIX.c",
        "silk/fixed/burg_modified_FIX.c",
        "silk/fixed/k2a_FIX.c",
        "silk/fixed/k2a_Q16_FIX.c",
        "silk/fixed/pitch_analysis_core_FIX.c",
        "silk/fixed/vector_ops_FIX.c",
        "silk/fixed/schur64_FIX.c",
        "silk/fixed/schur_FIX.c",
    ]
else:
    opus_sources_silk = [
        "silk/float/apply_sine_window_FLP.c",
        "silk/float/corrMatrix_FLP.c",
        "silk/float/encode_frame_FLP.c",
        "silk/float/find_LPC_FLP.c",
        "silk/float/find_LTP_FLP.c",
        "silk/float/find_pitch_lags_FLP.c",
        "silk/float/find_pred_coefs_FLP.c",
        "silk/float/LPC_analysis_filter_FLP.c",
        "silk/float/LTP_analysis_filter_FLP.c",
        "silk/float/LTP_scale_ctrl_FLP.c",
        "silk/float/noise_shape_analysis_FLP.c",
        "silk/float/prefilter_FLP.c",
        "silk/float/process_gains_FLP.c",
        "silk/float/regularize_correlations_FLP.c",
        "silk/float/residual_energy_FLP.c",
        "silk/float/solve_LS_FLP.c",
        "silk/float/warped_autocorrelation_FLP.c",
        "silk/float/wrappers_FLP.c",
        "silk/float/autocorrelation_FLP.c",
        "silk/float/burg_modified_FLP.c",
        "silk/float/bwexpander_FLP.c",
        "silk/float/energy_FLP.c",
        "silk/float/inner_product_FLP.c",
        "silk/float/k2a_FLP.c",
        "silk/float/levinsondurbin_FLP.c",
        "silk/float/LPC_inv_pred_gain_FLP.c",
        "silk/float/pitch_analysis_core_FLP.c",
        "silk/float/scale_copy_vector_FLP.c",
        "silk/float/scale_vector_FLP.c",
        "silk/float/schur_FLP.c",
        "silk/float/sort_FLP.c",
    ]
aec3_sources = [
    "AEC3/audio_processing/aec3/adaptive_fir_filter.cc",
    "AEC3/audio_processing/aec3/adaptive_fir_filter_erl.cc",
    "AEC3/audio_processing/aec3/aec3_common.cc",
    "AEC3/audio_processing/aec3/aec3_fft.cc",
    "AEC3/audio_processing/aec3/aec_state.cc",
    "AEC3/audio_processing/aec3/alignment_mixer.cc",
    "AEC3/audio_processing/aec3/api_call_jitter_metrics.cc",
    "AEC3/audio_processing/aec3/block_buffer.cc",
    "AEC3/audio_processing/aec3/block_delay_buffer.cc",
    "AEC3/audio_processing/aec3/block_framer.cc",
    "AEC3/audio_processing/aec3/block_processor.cc",
    "AEC3/audio_processing/aec3/block_processor_metrics.cc",
    "AEC3/audio_processing/aec3/clockdrift_detector.cc",
    "AEC3/audio_processing/aec3/comfort_noise_generator.cc",
    "AEC3/audio_processing/aec3/decimator.cc",
    "AEC3/audio_processing/aec3/dominant_nearend_detector.cc",
    "AEC3/audio_processing/aec3/downsampled_render_buffer.cc",
    "AEC3/audio_processing/aec3/echo_audibility.cc",
    "AEC3/audio_processing/aec3/echo_canceller3.cc",
    "AEC3/audio_processing/aec3/echo_path_delay_estimator.cc",
    "AEC3/audio_processing/aec3/echo_path_variability.cc",
    "AEC3/audio_processing/aec3/echo_remover.cc",
    "AEC3/audio_processing/aec3/echo_remover_metrics.cc",
    "AEC3/audio_processing/aec3/erle_estimator.cc",
    "AEC3/audio_processing/aec3/erl_estimator.cc",
    "AEC3/audio_processing/aec3/fft_buffer.cc",
    "AEC3/audio_processing/aec3/filter_analyzer.cc",
    "AEC3/audio_processing/aec3/frame_blocker.cc",
    "AEC3/audio_processing/aec3/fullband_erle_estimator.cc",
    "AEC3/audio_processing/aec3/main_filter_update_gain.cc",
    "AEC3/audio_processing/aec3/matched_filter.cc",
    "AEC3/audio_processing/aec3/matched_filter_lag_aggregator.cc",
    "AEC3/audio_processing/aec3/moving_average.cc",
    "AEC3/audio_processing/aec3/render_buffer.cc",
    "AEC3/audio_processing/aec3/render_delay_buffer.cc",
    "AEC3/audio_processing/aec3/render_delay_controller.cc",
    "AEC3/audio_processing/aec3/render_delay_controller_metrics.cc",
    "AEC3/audio_processing/aec3/render_signal_analyzer.cc",
    "AEC3/audio_processing/aec3/residual_echo_estimator.cc",
    "AEC3/audio_processing/aec3/reverb_decay_estimator.cc",
    "AEC3/audio_processing/aec3/reverb_frequency_response.cc",
    "AEC3/audio_processing/aec3/reverb_model.cc",
    "AEC3/audio_processing/aec3/reverb_model_estimator.cc",
    "AEC3/audio_processing/aec3/shadow_filter_update_gain.cc",
    "AEC3/audio_processing/aec3/signal_dependent_erle_estimator.cc",
    "AEC3/audio_processing/aec3/spectrum_buffer.cc",
    "AEC3/audio_processing/aec3/stationarity_estimator.cc",
    "AEC3/audio_processing/aec3/subband_erle_estimator.cc",
    "AEC3/audio_processing/aec3/subband_nearend_detector.cc",
    "AEC3/audio_processing/aec3/subtractor.cc",
    "AEC3/audio_processing/aec3/subtractor_output.cc",
    "AEC3/audio_processing/aec3/subtractor_output_analyzer.cc",
    "AEC3/audio_processing/aec3/suppression_filter.cc",
    "AEC3/audio_processing/aec3/suppression_gain.cc",
    "AEC3/audio_processing/audio_buffer.cc",
    "AEC3/audio_processing/audio_frame.cc",
    "AEC3/audio_processing/channel_buffer.cc",
    "AEC3/audio_processing/channel_layout.cc",
    "AEC3/audio_processing/high_pass_filter.cc",
    "AEC3/audio_processing/logging/apm_data_dumper.cc",
    "AEC3/audio_processing/logging/wav_file.cc",
    "AEC3/audio_processing/logging/wav_header.cc",
    "AEC3/audio_processing/resampler/push_sinc_resampler.cc",
    "AEC3/audio_processing/resampler/sinc_resampler.cc",
    "AEC3/audio_processing/sparse_fir_filter.cc",
    "AEC3/audio_processing/splitting_filter_c.c",
    "AEC3/audio_processing/splitting_filter.cc",
    "AEC3/audio_processing/three_band_filter_bank.cc",
    "AEC3/audio_processing/utility/cascaded_biquad_filter.cc",
    "AEC3/audio_processing/utility/ooura_fft.cc",
    "AEC3/api/echo_canceller3_config.cc",
    "AEC3/api/echo_canceller3_config_json.cc",
    "AEC3/api/echo_canceller3_factory.cc",
    "AEC3/base/system_wrappers/source/cpu_features.cc",
    "AEC3/base/system_wrappers/source/field_trial.cc",
    "AEC3/base/abseil/absl/base/internal/throw_delegate.cc",
    "AEC3/base/abseil/absl/strings/ascii.cc",
    "AEC3/base/abseil/absl/strings/charconv.cc",
    "AEC3/base/abseil/absl/strings/escaping.cc",
    "AEC3/base/abseil/absl/strings/internal/charconv_bigint.cc",
    "AEC3/base/abseil/absl/strings/internal/charconv_parse.cc",
    "AEC3/base/abseil/absl/strings/internal/memutil.cc",
    "AEC3/base/abseil/absl/strings/match.cc",
    "AEC3/base/abseil/absl/strings/numbers.cc",
    "AEC3/base/abseil/absl/strings/string_view.cc",
    "AEC3/base/abseil/absl/strings/str_cat.cc",
    "AEC3/base/abseil/absl/strings/str_replace.cc",
    "AEC3/base/abseil/absl/strings/str_split.cc",
    "AEC3/base/abseil/absl/strings/substitute.cc",
    "AEC3/base/abseil/absl/types/bad_optional_access.cc",
    # "AEC3/base/jsoncpp/src/lib_json/json_reader.cpp",
    # "AEC3/base/jsoncpp/src/lib_json/json_value.cpp",
    # "AEC3/base/jsoncpp/src/lib_json/json_writer.cpp",
    "AEC3/base/rtc_base/checks.cc",
    "AEC3/base/rtc_base/memory/aligned_malloc.cc",
    "AEC3/base/rtc_base/platform_thread_types.cc",
    "AEC3/base/rtc_base/race_checker.cc",
    "AEC3/base/rtc_base/strings/json.cc",
    "AEC3/base/rtc_base/strings/string_builder.cc",
    "AEC3/base/rtc_base/string_encode.cc",
    "AEC3/base/rtc_base/string_to_number.cc",
    "AEC3/base/rtc_base/string_utils.cc",
    "AEC3/base/rtc_base/system/file_wrapper.cc",
    "AEC3/base/rtc_base/time_utils.cc",
]
if enable_webrtc_logging:
    aec3_sources += [
        "AEC3/base/system_wrappers/source/metrics.cc",
        "AEC3/base/rtc_base/critical_section.cc",
        "AEC3/base/rtc_base/logging.cc",
    ]
if env["arch"] == "arm64":
    aec3_sources += [
        "AEC3/audio_processing/utility/ooura_fft_neon.cc",
        "AEC3/audio_processing/resampler/sinc_resampler_neon.cc",
    ]
elif env["arch"] == "mips64":  # Check if supported.
    aec3_sources += ["AEC3/audio_processing/resampler/ooura_fft_mips.cc"]
elif env["arch"] == "x86_64" and env["platform"] != "ios":
    aec3_sources += [
        "AEC3/audio_processing/utility/ooura_fft_sse2.cc",
        "AEC3/audio_processing/resampler/sinc_resampler_sse.cc",
    ]

env_thirdparty.disable_warnings()
thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources + opus_sources_silk] + [
    "thirdparty/" + file for file in aec3_sources
]

env_thirdparty.Prepend(CPPPATH=["#thirdparty/libogg"])
env_thirdparty.Append(CPPDEFINES=["HAVE_CONFIG_H"])
thirdparty_include_paths = [
    "",
    "celt",
    "opus",
    "silk",
    "silk/fixed",
    "silk/float",
]
env_thirdparty.Prepend(CPPPATH=[thirdparty_dir + "/" + dir for dir in thirdparty_include_paths])

if env["platform"] == "android":
    if "android_arch" in env and env["android_arch"] == "armv7":
        env_thirdparty.Append(CPPDEFINES=["OPUS_ARM_OPT"])
    elif "android_arch" in env and env["android_arch"] == "arm64v8":
        env_thirdparty.Append(CPPDEFINES=["OPUS_ARM64_OPT"])
elif env["platform"] == "iphone":
    if "arch" in env and env["arch"] == "arm":
        env_thirdparty.Append(CPPDEFINES=["OPUS_ARM_OPT"])
    elif "arch" in env and env["arch"] == "arm64":
        env_thirdparty.Append(CPPDEFINES=["OPUS_ARM64_OPT"])
elif env["platform"] == "osx":
    if "arch" in env and env["arch"] == "arm64":
        env_thirdparty.Append(CPPDEFINES=["OPUS_ARM64_OPT"])

env_thirdparty.add_source_files(env.modules_sources, Glob("thirdparty/libsamplerate/src/*.c"))
env_thirdparty.add_source_files(env.modules_sources, thirdparty_sources)

module_env.add_source_files(env.modules_sources, "*.cpp")
module_env.add_source_files(env.modules_sources, "thirdparty/*.cpp")
